# < head -n1 par_ald.csv | awk -F, \'{print $2}\'

###########################################################################
# old
###########################################################################
function rf(){
# Partitioning to A and B models
head -n1 ../results/clusters_all.csv > clusters_all_A.csv
cp clusters_all_A.csv clusters_all_B.csv
awk -F, 'NR>1{if ($11==0) print}' ../results/clusters_all.csv >> clusters_all_A.csv
awk -F, 'NR>1{if ($11>0) print}' ../results/clusters_all.csv >> clusters_all_B.csv
# RF
Rscript ../scripts/random_forest_cluster.R -f ../results/clusters_all.csv -o rf_importance_cluster_all_original.csv
Rscript ../scripts/random_forest_cluster.R -f clusters_all_A.csv -o rf_importance_cluster_all_A_original.csv
Rscript ../scripts/random_forest_cluster.R -f clusters_all_B.csv -o rf_importance_cluster_all_B_original.csv
# Format variable names
formatVar rf_importance_cluster_all_original.csv rf_importance_cluster_all.csv
formatVar rf_importance_cluster_all_A_original.csv rf_importance_cluster_all_A.csv
formatVar rf_importance_cluster_all_B_original.csv rf_importance_cluster_all_B.csv
# Plot
plotRF rf_importance_cluster_all.csv rf_importance_cluster_mse_all 1
plotRF rf_importance_cluster_all_A.csv rf_importance_cluster_mse_A 2
plotRF rf_importance_cluster_all_B.csv rf_importance_cluster_mse_B 3
}

    ### find expected time for each cell
    ## startTime = int(infectionTimeline.columns[1])

    ## for index, row in infectionTimeline.iterrows():
    ##     cell_id = int(row["cell_id"])
    ##     t = startTime
    ##     totProb=0
    ##     for column in row:
    ##         if column > 1:
    ##             continue
    ##         expectedTimes[cell_id]+=t * column
    ##         totProb+=column
    ##         t += 1
    ##     # Taking care of cells that never got infected with probability 1 
    ##     # in the simulation time span.
    ##     expectedTimes[cell_id]+=(1-totProb)*t

    ## #print sorted_dict
    ## for key, value in sorted_dict:
    ##     startTime = int(df.columns[1])
    ##     for i in range(int(len(df.columns)/step_size)):
    ##         if value >= startTime and value < (startTime + step_size):
    ##             try: bin_dict[startTime] += [key]
    ##             except: bin_dict[startTime] = [key]
    ##         startTime += step_size
    ## output_df = pd.DataFrame()
    ## output_df = output_df.append(bin_dict, ignore_index=True)
    ## output_df.to_csv(out_file, index = False)
            
